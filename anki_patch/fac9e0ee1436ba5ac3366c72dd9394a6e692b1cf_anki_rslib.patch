From 45de36797eed8e079d24225f859ed89fed087ef8 Mon Sep 17 00:00:00 2001
From: Dominique Martinet <dominique.martinet@atmark-techno.com>
Date: Mon, 11 Sep 2023 09:45:41 +0900
Subject: [PATCH] compat with ankisyncd-rs

- make some structs public
- don't require ftl
---
 rslib/i18n/gather.rs                            |  6 +++---
 rslib/src/error/mod.rs                          |  2 +-
 rslib/src/sync/http_server/media_manager/mod.rs |  4 ++--
 rslib/src/sync/http_server/mod.rs               | 10 +++++-----
 rslib/src/sync/http_server/user.rs              |  2 +-
 rslib/src/sync/request/mod.rs                   |  4 ++--
 6 files changed, 14 insertions(+), 14 deletions(-)

diff --git a/rslib/i18n/gather.rs b/rslib/i18n/gather.rs
index a25e5813ecdf..de3ead2240bc 100644
--- a/rslib/i18n/gather.rs
+++ b/rslib/i18n/gather.rs
@@ -21,16 +21,16 @@ pub fn get_ftl_data() -> TranslationsByLang {
     let ftl_base = source_tree_root();
     add_folder(&mut map, &ftl_base.join("core"), "templates");
     // And core translations from submodule
-    add_translation_root(&mut map, &ftl_base.join("core-repo/core"), true);
+    // add_translation_root(&mut map, &ftl_base.join("core-repo/core"), true);
 
     if let Some(path) = extra_ftl_root() {
         // Mobile client has requested its own extra translations
-        add_translation_root(&mut map, &path, false);
+        // add_translation_root(&mut map, &path, false);
     } else {
         // Qt core templates from this repo
         add_folder(&mut map, &ftl_base.join("qt"), "templates");
         // And translations from submodule
-        add_translation_root(&mut map, &ftl_base.join("qt-repo/desktop"), true)
+        // add_translation_root(&mut map, &ftl_base.join("qt-repo/desktop"), true)
     }
     map
 }
diff --git a/rslib/src/error/mod.rs b/rslib/src/error/mod.rs
index 87c128b450e6..d432d509437e 100644
--- a/rslib/src/error/mod.rs
+++ b/rslib/src/error/mod.rs
@@ -11,7 +11,7 @@ mod search;
 pub mod windows;
 
 use anki_i18n::I18n;
-use anki_io::FileIoError;
+pub use anki_io::FileIoError;
 use anki_io::FileOp;
 pub use db::DbError;
 pub use db::DbErrorKind;
diff --git a/rslib/src/sync/http_server/media_manager/mod.rs b/rslib/src/sync/http_server/media_manager/mod.rs
index 8eae3d97f407..0e4e2bd56f80 100644
--- a/rslib/src/sync/http_server/media_manager/mod.rs
+++ b/rslib/src/sync/http_server/media_manager/mod.rs
@@ -16,13 +16,13 @@ use crate::sync::media::changes::MediaChange;
 use crate::sync::media::database::server::ServerMediaDatabase;
 use crate::sync::media::sanity::MediaSanityCheckResponse;
 
-pub(crate) struct ServerMediaManager {
+pub struct ServerMediaManager {
     pub media_folder: PathBuf,
     pub db: ServerMediaDatabase,
 }
 
 impl ServerMediaManager {
-    pub(crate) fn new(user_folder: &Path) -> HttpResult<ServerMediaManager> {
+    pub fn new(user_folder: &Path) -> HttpResult<ServerMediaManager> {
         let media_folder = user_folder.join("media");
         create_dir_all(&media_folder).or_internal_err("media folder create")?;
         Ok(Self {
diff --git a/rslib/src/sync/http_server/mod.rs b/rslib/src/sync/http_server/mod.rs
index 1d98c381ccea..0334bfeb035f 100644
--- a/rslib/src/sync/http_server/mod.rs
+++ b/rslib/src/sync/http_server/mod.rs
@@ -3,9 +3,9 @@
 
 mod handlers;
 mod logging;
-mod media_manager;
-mod routes;
-mod user;
+pub mod media_manager;
+pub mod routes;
+pub mod user;
 
 use std::collections::HashMap;
 use std::future::Future;
@@ -44,12 +44,12 @@ use crate::sync::request::MAXIMUM_SYNC_PAYLOAD_BYTES;
 use crate::sync::response::SyncResponse;
 
 pub struct SimpleServer {
-    state: Mutex<SimpleServerInner>,
+   pub state: Mutex<SimpleServerInner>,
 }
 
 pub struct SimpleServerInner {
     /// hkey->user
-    users: HashMap<String, User>,
+  pub  users: HashMap<String, User>,
 }
 
 #[derive(serde::Deserialize, Debug)]
diff --git a/rslib/src/sync/http_server/user.rs b/rslib/src/sync/http_server/user.rs
index df7ae7596775..39ead0d2a315 100644
--- a/rslib/src/sync/http_server/user.rs
+++ b/rslib/src/sync/http_server/user.rs
@@ -13,7 +13,7 @@ use crate::sync::error::HttpResult;
 use crate::sync::error::OrHttpErr;
 use crate::sync::http_server::media_manager::ServerMediaManager;
 
-pub(in crate::sync) struct User {
+pub struct User {
     pub name: String,
     pub col: Option<Collection>,
     pub sync_state: Option<ServerSyncState>,
diff --git a/rslib/src/sync/request/mod.rs b/rslib/src/sync/request/mod.rs
index a6f9ea8d89e6..bfaac228eaec 100644
--- a/rslib/src/sync/request/mod.rs
+++ b/rslib/src/sync/request/mod.rs
@@ -2,7 +2,7 @@
 // License: GNU AGPL, version 3 or later; http://www.gnu.org/licenses/agpl.html
 
 pub mod header_and_stream;
-mod multipart;
+pub mod multipart;
 
 use std::any::Any;
 use std::env;
@@ -39,7 +39,7 @@ use crate::version::sync_client_version_short;
 #[derive(Clone)]
 pub struct SyncRequest<T> {
     pub data: Vec<u8>,
-    json_output_type: PhantomData<T>,
+    pub json_output_type: PhantomData<T>,
     pub sync_version: SyncVersion,
     /// empty with older clients
     pub client_version: String,
-- 
2.42.0

